# -*- coding: utf-8 -*-
"""Python Mini Project(Food Ordering).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T9ebM05cQLhACxklDYX6meczvWjzie0f
"""

pip install simple_colors

pip install tabulate

import csv
import pandas as pd
import random
from os import readlink
import datetime
import simple_colors
from simple_colors import *
from tabulate import tabulate



# Create a class to represent a user.
class User:
    def __init__(self, name, address, payment_info):
        self.name = name
        self.address = address
        self.payment_info = payment_info

    def get_name(self):
        return self.name

    def get_address(self):
        return self.address

    def get_payment_info(self):
        return self.payment_info

# Create a class to represent an order.
class Order:
    def __init__(self, user, items, total_cost):
        self.user = user
        self.items = items
        self.total_cost = total_cost

    def get_user(self):
        return self.user

    def get_items(self):
        return self.items

    def get_total_cost(self):
        return self.total_cost

    def calculate_total_cost(self, menu):
        total_cost = 0
        for restaurant, categories in self.items.items():
            for category, items in categories.items():
                for item, quantity in items.items():
                    try:
                        price = menu[restaurant][category][item]
                        total_cost += price * quantity
                    except KeyError:
                        print(f"Item {item} in category {category} does not exist in {restaurant}.")
        return total_cost



# Function to load the menu from the CSV file
def load_menu():
    menu = {}

    with open('/content/menu.csv', 'r') as file:
        reader = csv.reader(file)
        next(reader)

        for row in reader:
            restaurant = row[0]
            category = row[1]
            item = row[2]
            price = float(row[3])

            if restaurant not in menu:
                menu[restaurant] = {}

            if category not in menu[restaurant]:
                menu[restaurant][category] = {}

            menu[restaurant][category][item] = price

    return menu


# Function to display the menu categories
def display_categories(menu):
    print('Menu Categories:')
    for restaurant, categories in menu.items():
        print(f'Restaurant: {restaurant}')
        for category in categories:
            print(f'- {category}')
        print()


# Function to display the menu items within a category
def display_menu_items(menu, restaurant, category):
    print(f'{(category)} Menu for {restaurant}:')
    for item, price in menu[restaurant][category].items():
        print(f'{item}: Rs {price}/-')
    print()




# Function to calculate the final order price
def calculate_order_price(order, menu):
    total_price = 0
    for restaurant, categories in order.get_items().items():
        for category, items in categories.items():
            for item, quantity in items.items():
                try:
                    price = menu[restaurant][category][item]
                    total_price += price * quantity
                except KeyError:
                    print(f"Item {item} in category {category} does not exist in {restaurant}.")
    return total_price


#Function to validate the password.
def validate_password(password):
    if not any(char.isdigit() for char in password):
        return False
    if not any(char.isupper() for char in password):
        return False
    return True

# Function to create a new user account
def create_user_account(x,y):
    while True:
        username = input("Enter a username: ")
        if is_user_exists(username):
            print("*Username already exists. Please choose a different username.*")
        else:
            break
    while True:
        name = input("Enter your name: ")
        address = input("Enter your address: ")
        payment_info = input("Enter your payment information: ")
        password = input("Enter a password: ")
        break

    with open('/content/users.csv', 'a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow([name, address, payment_info, password])



# Function to check if a user account exists
def is_user_exists(username):
    with open('/content/users.csv', 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            if row[0] == username:
                return True
    return False

# Function to validate user login credentials
def login_user(username, password):
    with open('/content/users.csv', 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            if row[0] == username and row[3] == password:
                return True
    return False

#Function to define view cart where the user can see items and their price.
def view_cart(order,menu):
    if order is None:
        print("Your cart is empty.",['bold'])
    else:
        print("Your cart contains the following items:",)
        print(" ")
        for category, items in order.get_items().items():
            for item, quantity in items.items():
                print(f"{item}: {quantity}x")
        total_cost = order.calculate_total_cost(menu)
        print(green(f"The total cost is Rs {total_cost}/-",['bold','italic']))



#Function to assign delivery boy to the order made.
def assign_delivery_boy(delivery_boys, order):
    if not order:
        print("Please check out before assigning a delivery boy.",['bold'])
        return
    random_delivery_boy = random.choice(delivery_boys)
    delivery_boy_name, delivery_boy_phone = random_delivery_boy
    print(f"Delivery Boy: {delivery_boy_name}")
    print(f"Phone Number: {delivery_boy_phone}")
    return delivery_boy_name


# Example usage:
delivery_boys = [
    ("Dev", "+1234567890"),
    ("Shrey", "+9876543210"),
    ("Dutta", "+2468135790"),
    ("Mehar", "+1357924680")
]

#Function to define checkout where the user is provided with three options of payments.
def checkout(order):


    print(red("Please choose a payment method:",['bold']))
    print('\033[1m1. UPI\033[0m')
    print('\033[1m2. Cash\033[0m')
    print('\033[1m3. Card\033[0m')
    print(" ")

    payment_method = input("Enter your choice (enter option number): ")

    if payment_method == "1":
        total_cost = order.calculate_total_cost(menu)
        # UPI payment
        print(" ")
        upi_id = input("Enter your UPI ID: ")
        print(f"Payment of {total_cost} INR successful via UPI ({upi_id})",['bold'])
        print(" ")

    elif payment_method == "2":
        # Cash payment
        print(" ")
        print(red("Please make the cash payment to the delivery person.",['bold']))
        print(" ")

    elif payment_method == "3":
        # Card payment
        print(" ")
        card_number = input("Credit card number: ")
        expiration_date = input("Expiration date (MM/YYYY): ")
        cvv = input("CVV: ")
        print(" ")

        print('\033[1;3m'+"Payment successful!"+'\033[1;3m')
        print(" ")

    else:
        print(red("Invalid payment method. Please choose a valid option.",['bold']))
        print(" ")


#Function to define Exit
def exit_program():
    print(" ")
    print(red('\033[1;3m'+"____________________*Thank you for using our food ordering system! Please visit again!*____________________"+'\033[1;3m'))
    exit()


#Function to view order summary where the bill with all the necssary details is provided in a tabulate form.
def generate_order_summary(order, delivery_boy,menu):
    if order is None:
        return "No order placed."

    delivery_time_minutes = random.randint(10, 60)
    delivery_time = f"{delivery_time_minutes} minutes"


    total_cost = order.calculate_total_cost(menu)

    summary_data = [
        ["Item", "Quantity"],
    ]
    for restaurant_category, items in order.get_items().items():
        for item, quantity in items.items():
            summary_data.append([item, quantity])

    summary_data.append(["Total Cost", total_cost])
    summary_data.append(["Delivery Boy", delivery_boy])
    summary_data.append(["Delivery Time", delivery_time])

    summary_df = pd.DataFrame(summary_data)
    summary_str = summary_df.to_string(index=False, header=False)
    return tabulate(summary_data, headers="firstrow", tablefmt="fancy_grid")


def check_hotel_availability():
    current_time = datetime.datetime.now()
    if current_time.hour >= 22:
        print("Hotels are unavailable")
        exit_program()

#Function to define the user interface for login and creating the user.
def account_login_or_create():
    print(" ")
    print(red("**********************************************************************************************************"))
    print(" ")
    print(red("                                    Welcome to the food ordering system                                    ", ['italic', 'bold', 'underlined']))
    print(" ")
    print(red("**********************************************************************************************************"))
    print(" ")

    while True:
        while True:
            user_input = input("Do you have an account? (Y/N): ")
            print(red("**********************************************************************************************************"))
            print(" ")

            if user_input == "Y":
                # Login the user.
                username = input("Enter your username: ")
                print(" ")
                password = input("Enter your password: ")
                print(" ")

                if login_user(username, password):
                    print(green("---------------------------------CONGRATULATIONS! Login successful!---------------------------------",['bold']))
                    return
                else:
                    print(red("Invalid username or password.",['bold']))
                    print(" ")
            elif user_input == "N":
                break
            else:
                print(red("Invalid choice. Please enter 'Y' or 'N'.",['bold']))
                print(" ")

        while True:
            # Create a new user account.
            username = input("Enter a username (to check if it's available): ")
            print(" ")

            if is_user_exists(username):
                print(red("*Username already exists:( Please choose a different username*",['bold']))
                print(" ")
            else:
                break

        while True:
            password = input("Enter a password (must contain at least 1 capital letter and 1 numeric digit): ")
            print(" ")

            if not validate_password(password):
                print(red("*Password does not meet the requirements. Please try again.*",['bold']))
                print(" ")
            else:
                print(green("---Username is available and password meets the requirements.---",['bold']))
                print(" ")
                create_user_account(username, password)
                print(" ")
                print(green("-------------YAYYY! Account created successfully!-------------",['bold']))
                print("**********************************************************************************************************")
                return

#Let the user browse the menu and add items to their cart.

def main():
    menu = load_menu()
    order = None


    while True:
            print(" ")
            print(red("========In the mood for some food? What would you like do?========",['bold']))
            print(" ")
            print(yellow('\033[1;3m'+"1. Browse the menu"+'\033[1;3m'))
            print(yellow('\033[1;3m'+"2. View my cart"+'\033[1;3m'))
            print(yellow('\033[1;3m'+"3. Checkout"+'\033[1;3m'))
            print(yellow('\033[1;3m'+"4. Quit"+'\033[1;3m'))

            user_input = input("Enter your choice (enter option number): ")

            if user_input == "1":
                print(" ")
                display_categories(menu)
                while True:
                    restaurant = input("Select a restaurant name *kindly choose from the available options* (or enter q to quit browsing): ")
                    print(" ")
                    if restaurant == 'q':
                        break
                    if restaurant not in menu:
                        print("Invalid restaurant selection :( Please try again.")
                        continue
                    category = input("Select a category *kindly choose from the available options* (or enter q to select a different restaurant): ")
                    print(" ")
                    if category == 'q':
                        continue
                    if category not in menu[restaurant]:
                        print(" ")
                        print("Invalid category selection :( Please try again.")
                        continue
                    display_menu_items(menu, restaurant, category)
                    item = input("Select an item to add to your order *kindly choose from the available options* (or enter q to select a different category): ")
                    print(" ")
                    if item == 'q':
                        continue
                    if item not in menu[restaurant][category]:
                        print("Invalid item selection :( Please try again.")
                        print(" ")
                        continue
                    quantity = int(input("Enter the quantity: "))
                    if order is None:
                        order = Order(User("John Doe", "123 Street", "payment_info"), {}, 0)
                    if restaurant not in order.get_items():
                        order.get_items()[restaurant] = {}
                    if category not in order.get_items()[restaurant]:
                        order.get_items()[restaurant][category] = {}
                    order.get_items()[restaurant][category][item] = quantity

            elif user_input == "2":
                print(" ")
                view_cart(order,menu)

            elif user_input == "3":
                print(" ")
                if order is None or len(order.get_items()) == 0:
                    print(red("***No items in the cart. Please add items before checking out.***", ['bold']))
                else:
                    calculate_order_price(order, menu)
                    # Checkout
                    print(" ")
                    checkout(order)

            elif user_input == "4":
                # Exit program
                print(" ")
                if order is not None:
                    delivery_boy_name = assign_delivery_boy(delivery_boys, order)
                    print(" ")
                    order_summary = generate_order_summary(order, delivery_boy_name,menu)
                    print(red(order_summary,['bold']))
                    print(" ")
                    exit_program()
                    break
                else:
                    print(" ")
                    print(red("***No order placed. Exiting program.***",['bold']))
                    exit_program()
                    break

check_hotel_availability()
account_login_or_create()

if __name__ == "__main__":
    main()